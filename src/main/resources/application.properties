quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.host=0.0.0.0
quarkus.http.enable-compression=true
quarkus.devservices.enabled=false


quarkus.rest-client.actions_openapi_json.url=${BACKSTAGE_ORCHESTRATOR_URL:http://backstage-backstage-backstage-system.apps.cluster-zm2rd.dynamic.redhatworkshops.io/api/orchestrator}
quarkus.rest-client.notifications_openapi_yaml.url=${BACKSTAGE_NOTIFICATIONS_URL:http://backstage-backstage-backstage-system.apps.cluster-zm2rd.dynamic.redhatworkshops.io/api/notifications}

quarkus.rest-client.jira_openapi_json.url=https://redhat-gfarache.atlassian.net/jira/servicedesk/
quarkus.openapi-generator.jira_openapi_json.auth.bearerAuth.bearer-token=${JIRA_BEARER_TOKEN:no-token}

# Configuration for the incoming cloud events received by the serverless workflows.
mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/
mp.messaging.incoming.kogito_incoming_stream.method=POST

# This property is used when sending the notification while waiting for Q&A
jira_url=${JIRA_URL:https://redhat-gfarache.atlassian.net/jira/servicedesk}
